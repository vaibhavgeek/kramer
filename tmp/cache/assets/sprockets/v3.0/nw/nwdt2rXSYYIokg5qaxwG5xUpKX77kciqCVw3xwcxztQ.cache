I"ì(function() {
  var Index,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Index = (function(superClass) {
    extend(Index, superClass);

    Index.prototype.events = {
      'submit #login': 'login'
    };

    function Index() {
      this.error = bind(this.error, this);
      this.success = bind(this.success, this);
      Index.__super__.constructor.apply(this, arguments);
      if (!this.Config.get('system_init_done')) {
        this.navigate('#getting_started');
        return;
      }
      if (this.Session.get()) {
        this.navigate('#');
        return;
      }
      this.navHide();
      this.title('Sign in');
      this.render();
      this.navupdate('#login');
      this.bind('config_update_local', (function(_this) {
        return function(data) {
          if (!data.name.match(/^maintenance/) && !data.name.match(/^auth/) && data.name !== 'user_lost_password' && data.name !== 'user_create_account' && data.name !== 'product_name' && data.name !== 'product_logo' && data.name !== 'fqdn') {
            return;
          }
          _this.render();
          return 'rerender';
        };
      })(this));
      this.bind('ui:rerender', (function(_this) {
        return function() {
          return _this.render();
        };
      })(this));
    }

    Index.prototype.render = function(data) {
      var auth_provider_all, auth_providers, key, provider;
      if (data == null) {
        data = {};
      }
      auth_provider_all = App.Config.get('auth_provider_all');
      auth_providers = [];
      for (key in auth_provider_all) {
        provider = auth_provider_all[key];
        if (this.Config.get(provider.config) === true || this.Config.get(provider.config) === 'true') {
          auth_providers.push(provider);
        }
      }
      this.html(App.view('login')({
        item: data,
        logoUrl: this.logoUrl(),
        auth_providers: auth_providers
      }));
      if (!this.$('[name="username"]').val()) {
        this.$('[name="username"]').focus();
      } else {
        this.$('[name="password"]').focus();
      }
      return this.scrollTo();
    };

    Index.prototype.login = function(e) {
      var params;
      e.preventDefault();
      e.stopPropagation();
      this.formDisable(e);
      params = this.formParam(e.target);
      this.username = params['username'];
      return App.Auth.login({
        data: params,
        success: this.success,
        error: this.error
      });
    };

    Index.prototype.success = function(data, status, xhr) {
      var requested_url;
      requested_url = this.Config.get('requested_url');
      if (requested_url && requested_url !== '#login' && requested_url !== '#logout') {
        this.log('notice', "REDIRECT to '" + requested_url + "'");
        this.navigate(requested_url);
        return this.Config.set('requested_url', '');
      } else {
        this.log('notice', 'REDIRECT to -#/-');
        return this.navigate('#/');
      }
    };

    Index.prototype.error = function(xhr, statusText, error) {
      var details, detailsRaw;
      detailsRaw = xhr.responseText;
      details = {};
      if (!_.isEmpty(detailsRaw)) {
        details = JSON.parse(detailsRaw);
      }
      this.notify({
        type: 'error',
        msg: App.i18n.translateContent(details.error || 'Wrong Username or Password combination.'),
        removeAll: true
      });
      this.render({
        username: this.username
      });
      return this.delay((function(_this) {
        return function() {
          return _this.shake(_this.$('.hero-unit'));
        };
      })(this), 600);
    };

    return Index;

  })(App.ControllerContent);

  App.Config.set('login', Index, 'Routes');

}).call(this);
:ET