I"Á(function() {
  var SidebarCustomer,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  SidebarCustomer = (function(superClass) {
    extend(SidebarCustomer, superClass);

    function SidebarCustomer() {
      this.editCustomer = bind(this.editCustomer, this);
      this.showCustomer = bind(this.showCustomer, this);
      this.badgeRenderLocal = bind(this.badgeRenderLocal, this);
      this.badgeRender = bind(this.badgeRender, this);
      this.metaBadge = bind(this.metaBadge, this);
      this.sidebarItem = bind(this.sidebarItem, this);
      return SidebarCustomer.__super__.constructor.apply(this, arguments);
    }

    SidebarCustomer.prototype.sidebarItem = function() {
      var currentUser, customer;
      if (!this.permissionCheck('ticket.agent')) {
        return;
      }
      if (_.isEmpty(this.params.customer_id)) {
        return;
      }
      this.item = {
        name: 'customer',
        badgeCallback: this.badgeRender,
        sidebarHead: 'Customer',
        sidebarCallback: this.showCustomer,
        sidebarActions: []
      };
      if (App.User.exists(this.params.customer_id)) {
        customer = App.User.find(this.params.customer_id);
        currentUser = App.User.find(App.Session.get('id'));
        if (customer.isAccessibleBy(currentUser, 'change')) {
          this.item.sidebarActions.push({
            title: 'Edit Customer',
            name: 'customer-edit',
            callback: this.editCustomer
          });
        }
      }
      return this.item;
    };

    SidebarCustomer.prototype.metaBadge = function(user) {
      var counter, cssClass;
      counter = '';
      cssClass = '';
      counter = this.sidebarItemCounter(user);
      if (this.Config.get('ui_sidebar_open_ticket_indicator_colored') === true) {
        if (counter === 1) {
          cssClass = 'tabsSidebar-tab-count--warning';
        }
        if (counter > 1) {
          cssClass = 'tabsSidebar-tab-count--danger';
        }
      }
      return {
        name: 'customer',
        icon: 'person',
        counterPossible: true,
        counter: counter,
        cssClass: cssClass
      };
    };

    SidebarCustomer.prototype.badgeRender = function(el) {
      var user;
      this.badgeEl = el;
      if (App.User.exists(this.params.customer_id)) {
        user = App.User.find(this.params.customer_id);
        return this.badgeRenderLocal(user);
      }
    };

    SidebarCustomer.prototype.badgeRenderLocal = function(user) {
      return this.badgeEl.html(App.view('generic/sidebar_tabs_item')(this.metaBadge(user)));
    };

    SidebarCustomer.prototype.sidebarItemCounter = function(user) {
      var counter;
      counter = '';
      if (user && user.preferences && user.preferences.tickets_open) {
        counter = user.preferences.tickets_open;
      }
      return counter;
    };

    SidebarCustomer.prototype.showCustomer = function(el) {
      this.elSidebar = el;
      if (_.isEmpty(this.params.customer_id)) {
        return;
      }
      return new App.WidgetUser({
        el: this.elSidebar,
        user_id: this.params.customer_id,
        callback: this.badgeRenderLocal
      });
    };

    SidebarCustomer.prototype.editCustomer = function() {
      return new App.ControllerGenericEdit({
        id: this.params.customer_id,
        genericObject: 'User',
        screen: 'edit',
        pageData: {
          title: 'Users',
          object: 'User',
          objects: 'Users'
        },
        container: this.elSidebar.closest('.content')
      });
    };

    return SidebarCustomer;

  })(App.Controller);

  App.Config.set('200-Customer', SidebarCustomer, 'TicketCreateSidebar');

}).call(this);
:ET