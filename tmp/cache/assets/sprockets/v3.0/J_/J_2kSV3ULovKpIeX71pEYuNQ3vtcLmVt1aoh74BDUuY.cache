I"§(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  App.TestController1 = (function(superClass) {
    extend(TestController1, superClass);

    function TestController1() {
      this.active = bind(this.active, this);
      this.hide = bind(this.hide, this);
      this.show = bind(this.show, this);
      TestController1.__super__.constructor.apply(this, arguments);
      this.showState = false;
      this.hideState = false;
      this.activeState = false;
      this.render();
    }

    TestController1.prototype.meta = function() {
      return {};
    };

    TestController1.prototype.show = function() {
      this.showState = true;
      return this.render();
    };

    TestController1.prototype.hide = function() {
      this.hideState = true;
      return this.render();
    };

    TestController1.prototype.active = function(state) {
      this.activeState = state;
      return this.render();
    };

    TestController1.prototype.render = function() {
      return this.html("<div>some test controller message:'" + this.message + "',show:'" + this.showState + "',hide:'" + this.hideState + "',active:'" + this.activeState + "'</div>");
    };

    TestController1.prototype.url = function() {
      return "#/some/url/" + this.message;
    };

    return TestController1;

  })(App.Controller);

}).call(this);
:ET