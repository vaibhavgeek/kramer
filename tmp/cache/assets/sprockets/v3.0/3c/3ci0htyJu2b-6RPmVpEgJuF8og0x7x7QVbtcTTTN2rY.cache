I"(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  App.UiElement.tree_select = (function(superClass) {
    extend(tree_select, superClass);

    function tree_select() {
      return tree_select.__super__.constructor.apply(this, arguments);
    }

    tree_select.optionsSelect = function(children, value) {
      var child, i, len, results;
      if (!children) {
        return;
      }
      results = [];
      for (i = 0, len = children.length; i < len; i++) {
        child = children[i];
        if (child.value === value) {
          child.selected = true;
        }
        if (child.children) {
          results.push(this.optionsSelect(child.children, value));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    tree_select.render = function(attribute, params) {
      if (attribute.multiple) {
        attribute.multiple = 'multiple';
      } else {
        attribute.multiple = '';
      }
      this.getConfigOptionList(attribute, params);
      this.getRelationOptionList(attribute, params);
      this.addNullOption(attribute, params);
      this.sortOptions(attribute, params);
      if (attribute.options) {
        this.optionsSelect(attribute.options, attribute.value);
      }
      this.disabledOptions(attribute, params);
      this.filterOption(attribute, params);
      return new App.SearchableSelect({
        attribute: attribute
      }).element();
    };

    return tree_select;

  })(App.UiElement.ApplicationUiElement);

}).call(this);
:ET