I":(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  App.TicketZoomTimeAccounting = (function(superClass) {
    extend(TicketZoomTimeAccounting, superClass);

    function TicketZoomTimeAccounting() {
      this.onSubmit = bind(this.onSubmit, this);
      this.onCancel = bind(this.onCancel, this);
      this.skip = bind(this.skip, this);
      return TicketZoomTimeAccounting.__super__.constructor.apply(this, arguments);
    }

    TicketZoomTimeAccounting.prototype.buttonClose = true;

    TicketZoomTimeAccounting.prototype.buttonCancel = false;

    TicketZoomTimeAccounting.prototype.buttonSubmit = 'Account Time';

    TicketZoomTimeAccounting.prototype.buttonClass = 'btn--success';

    TicketZoomTimeAccounting.prototype.leftButtons = [
      {
        className: 'btn--text btn--subtle js-skip',
        text: 'skip'
      }
    ];

    TicketZoomTimeAccounting.prototype.head = 'Time Accounting';

    TicketZoomTimeAccounting.prototype.small = true;

    TicketZoomTimeAccounting.prototype.events = {
      'submit form': 'submit',
      'click .js-submit:not(.is-disabled)': 'submit',
      'click .js-cancel': 'cancel',
      'click .js-close': 'cancel',
      'click .js-skip': 'skip'
    };

    TicketZoomTimeAccounting.prototype.content = function() {
      return App.view('ticket_zoom/time_accounting')();
    };

    TicketZoomTimeAccounting.prototype.skip = function(e) {
      if (!this.submitCallback) {
        return;
      }
      this.submitCallback({});
      return this.close(e);
    };

    TicketZoomTimeAccounting.prototype.onCancel = function() {
      if (!this.cancelCallback) {
        return;
      }
      return this.cancelCallback();
    };

    TicketZoomTimeAccounting.prototype.onClose = function() {
      if (!this.cancelCallback) {
        return;
      }
      return this.cancelCallback();
    };

    TicketZoomTimeAccounting.prototype.onSubmit = function() {
      var params;
      this.$('[name="time_unit"]').removeClass('has-error');
      params = this.formParams();
      if (params.time_unit) {
        params.time_unit = params.time_unit.replace(',', '.');
        if (isNaN(parseFloat(params.time_unit)) || params.time_unit.match(/[A-z]|\s/)) {
          this.$('[name="time_unit"]').addClass('has-error');
          return;
        }
      }
      this.close();
      if (this.submitCallback) {
        return this.submitCallback(params);
      }
    };

    return TicketZoomTimeAccounting;

  })(App.ControllerModal);

}).call(this);
:ET