I"<
(function() {
  var Index,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Index = (function(superClass) {
    extend(Index, superClass);

    Index.prototype.requiredPermission = 'admin.package';

    Index.prototype.header = 'Packages';

    Index.prototype.events = {
      'click .action': 'action'
    };

    function Index() {
      Index.__super__.constructor.apply(this, arguments);
      this.load();
    }

    Index.prototype.load = function() {
      return this.ajax({
        id: 'packages',
        type: 'GET',
        url: this.apiPath + "/packages",
        processData: true,
        success: (function(_this) {
          return function(data) {
            _this.packages = data.packages;
            return _this.render();
          };
        })(this)
      });
    };

    Index.prototype.render = function() {
      var i, item, len, ref;
      ref = this.packages;
      for (i = 0, len = ref.length; i < len; i++) {
        item = ref[i];
        item.action = [];
        if (item.state === 'installed') {
          item.action = ['uninstall'];
        } else if (item.state === 'uninstalled') {
          item.action = ['install'];
        } else if (item.state === 'deactivate') {
          item.action = ['uninstall', 'activate'];
        }
      }
      return this.html(App.view('package')({
        head: 'Dashboard',
        packages: this.packages
      }));
    };

    Index.prototype.action = function(e) {
      var httpType, id, type;
      e.preventDefault();
      id = $(e.target).parents('[data-id]').data('id');
      type = $(e.target).data('type');
      if (type === 'uninstall') {
        httpType = 'DELETE';
      }
      if (httpType) {
        return this.ajax({
          id: 'packages',
          type: httpType,
          url: this.apiPath + "/packages",
          data: JSON.stringify({
            id: id
          }),
          processData: false,
          success: (function(_this) {
            return function() {
              return _this.load();
            };
          })(this)
        });
      }
    };

    return Index;

  })(App.ControllerSubContent);

  App.Config.set('Packages', {
    prio: 3700,
    name: 'Packages',
    parent: '#system',
    target: '#system/package',
    controller: Index,
    permission: ['admin.package']
  }, 'NavBarAdmin');

}).call(this);
:ET