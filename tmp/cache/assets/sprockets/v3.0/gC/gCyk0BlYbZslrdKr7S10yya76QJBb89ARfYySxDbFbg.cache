I"Ê(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  App.WidgetUser = (function(superClass) {
    extend(WidgetUser, superClass);

    WidgetUser.prototype.events = {
      'focusout [contenteditable]': 'update'
    };

    function WidgetUser() {
      this.update = bind(this.update, this);
      this.render = bind(this.render, this);
      this.release = bind(this.release, this);
      WidgetUser.__super__.constructor.apply(this, arguments);
      this.subscribeId = App.User.full(this.user_id, this.render, false, true);
    }

    WidgetUser.prototype.release = function() {
      return App.User.unsubscribe(this.subscribeId);
    };

    WidgetUser.prototype.render = function(user) {
      var attributeConfig, attributeName, item, items, name, nameNew, ref, topic, userData;
      if (this.callback) {
        this.callback(user);
      }
      userData = [];
      ref = App.User.attributesGet('view');
      for (attributeName in ref) {
        attributeConfig = ref[attributeName];
        name = attributeName;
        nameNew = name.substr(0, name.length - 3);
        if (nameNew in user) {
          name = nameNew;
        }
        if ((user[name] || attributeConfig.tag === 'richtext') && attributeConfig.shown) {
          if (name !== 'firstname' && name !== 'lastname' && name !== 'organization') {
            userData.push(attributeConfig);
          }
        }
      }
      if (user.preferences) {
        items = [];
        if (user.preferences.tickets_open > 0) {
          item = {
            url: '',
            name: 'open',
            count: user.preferences.tickets_open,
            title: 'Open Tickets',
            "class": 'user-tickets',
            data: 'open'
          };
          items.push(item);
        }
        if (user.preferences.tickets_closed > 0) {
          item = {
            url: '',
            name: 'closed',
            count: user.preferences.tickets_closed,
            title: 'Closed Tickets',
            "class": 'user-tickets',
            data: 'closed'
          };
          items.push(item);
        }
        if (items[0]) {
          topic = {
            title: 'Tickets',
            items: items
          };
          user['links'] = [];
          user['links'].push(topic);
        }
      }
      this.html(App.view('widget/user')({
        header: 'Customer',
        edit: true,
        user: user,
        userData: userData
      }));
      this.$('[contenteditable]').ce({
        mode: 'textonly',
        multiline: true,
        maxlength: 250
      });
      return this.userTicketPopups({
        selector: '.user-tickets',
        user_id: user.id,
        position: 'right'
      });
    };

    WidgetUser.prototype.update = function(e) {
      var data, name, user, value;
      name = $(e.target).attr('data-name');
      value = $(e.target).html();
      user = App.User.find(this.user_id);
      if (user[name] !== value) {
        data = {};
        data[name] = value;
        user.updateAttributes(data);
        return this.log('notice', 'update', name, value, user);
      }
    };

    return WidgetUser;

  })(App.Controller);

}).call(this);
:ET