I"§(function() {
  var TicketZoomFormHanderDependencies;

  TicketZoomFormHanderDependencies = (function() {
    function TicketZoomFormHanderDependencies() {}

    TicketZoomFormHanderDependencies.run = function(params, attribute, attributes, classname, form, ui) {
      var dependency, fieldNameToChange, filter, i, item, len, newElement, results;
      if (!ui.formMeta) {
        return;
      }
      if (!ui.formMeta.dependencies) {
        return;
      }
      if (!ui.formMeta.dependencies[attribute.name]) {
        return;
      }
      dependency = ui.formMeta.dependencies[attribute.name][parseInt(params[attribute.name])];
      if (!dependency) {
        dependency = ui.formMeta.dependencies[attribute.name][params[attribute.name]];
      }
      if (dependency) {
        results = [];
        for (fieldNameToChange in dependency) {
          filter = [];
          if (dependency[fieldNameToChange]) {
            filter = dependency[fieldNameToChange];
          }
          for (i = 0, len = attributes.length; i < len; i++) {
            item = attributes[i];
            if (item.name === fieldNameToChange) {
              item['filter'] = {};
              item['filter'][fieldNameToChange] = filter;
              item["default"] = params[item.name];
              item.newValue = params[item.name];
              newElement = ui.formGenItem(item, classname, form);
            }
          }
          if (newElement) {
            results.push(form.find('[name="' + fieldNameToChange + '"]').closest('.form-group').replaceWith(newElement));
          } else {
            results.push(void 0);
          }
        }
        return results;
      }
    };

    return TicketZoomFormHanderDependencies;

  })();

  App.Config.set('100-ticketFormChanges', TicketZoomFormHanderDependencies, 'TicketZoomFormHandler');

  App.Config.set('100-ticketFormChanges', TicketZoomFormHanderDependencies, 'TicketCreateFormHandler');

}).call(this);
:ET