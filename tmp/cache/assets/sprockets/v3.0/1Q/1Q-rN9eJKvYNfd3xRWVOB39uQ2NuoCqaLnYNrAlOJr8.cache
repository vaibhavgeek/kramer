I"g(function() {
  var Index,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Index = (function(superClass) {
    extend(Index, superClass);

    Index.prototype.requiredPermission = 'user_preferences.language';

    Index.prototype.header = 'Language';

    Index.prototype.events = {
      'submit form': 'update'
    };

    function Index() {
      this.error = bind(this.error, this);
      this.success = bind(this.success, this);
      this.update = bind(this.update, this);
      this.render = bind(this.render, this);
      Index.__super__.constructor.apply(this, arguments);
      this.render();
    }

    Index.prototype.render = function() {
      var configure_attributes, html, i, len, locale, locales, options;
      html = $(App.view('profile/language')());
      options = {};
      locales = App.Locale.all();
      for (i = 0, len = locales.length; i < len; i++) {
        locale = locales[i];
        options[locale.locale] = locale.name;
      }
      configure_attributes = [
        {
          name: 'locale',
          display: '',
          tag: 'searchable_select',
          "null": false,
          "class": 'input',
          options: options,
          "default": App.i18n.get()
        }
      ];
      this.form = new App.ControllerForm({
        el: html.find('.language_item'),
        model: {
          configure_attributes: configure_attributes
        },
        autofocus: false
      });
      return this.html(html);
    };

    Index.prototype.update = function(e) {
      var error, params;
      e.preventDefault();
      params = this.formParam(e.target);
      error = this.form.validate(params);
      if (error) {
        this.formValidate({
          form: e.target,
          errors: error
        });
        return false;
      }
      this.formDisable(e);
      this.locale = params['locale'];
      return this.ajax({
        id: 'preferences',
        type: 'PUT',
        url: this.apiPath + "/users/preferences",
        data: JSON.stringify(params),
        processData: true,
        success: this.success,
        error: this.error
      });
    };

    Index.prototype.success = function(data, status, xhr) {
      return App.User.full(App.Session.get('id'), (function(_this) {
        return function() {
          App.i18n.set(_this.locale);
          App.Event.trigger('ui:rerender');
          return _this.notify({
            type: 'success',
            msg: App.i18n.translateContent('Successful!')
          });
        };
      })(this), true);
    };

    Index.prototype.error = function(xhr, status, error) {
      var data;
      this.render();
      data = JSON.parse(xhr.responseText);
      return this.notify({
        type: 'error',
        msg: App.i18n.translateContent(data.message)
      });
    };

    return Index;

  })(App.ControllerSubContent);

  App.Config.set('Language', {
    prio: 1000,
    name: 'Language',
    parent: '#profile',
    target: '#profile/language',
    controller: Index,
    permission: ['user_preferences.language']
  }, 'NavBarProfile');

}).call(this);
:ET