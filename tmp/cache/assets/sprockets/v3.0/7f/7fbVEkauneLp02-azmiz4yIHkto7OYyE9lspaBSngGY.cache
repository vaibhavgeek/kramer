I"(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  App.TicketZoomArticleActions = (function(superClass) {
    extend(TicketZoomArticleActions, superClass);

    TicketZoomArticleActions.prototype.events = {
      'click .js-ArticleAction': 'actionPerform'
    };

    function TicketZoomArticleActions() {
      this.scrollToCompose = bind(this.scrollToCompose, this);
      this.actionPerform = bind(this.actionPerform, this);
      TicketZoomArticleActions.__super__.constructor.apply(this, arguments);
      this.render();
    }

    TicketZoomArticleActions.prototype.render = function() {
      var actions;
      actions = this.actionRow(this.ticket, this.article);
      if (actions) {
        return this.html(App.view('ticket_zoom/article_view_actions')({
          article: this.article,
          actions: actions
        }));
      } else {
        return this.html('');
      }
    };

    TicketZoomArticleActions.prototype.actionRow = function(ticket, article) {
      var actionConfig, actions, config, i, key, keys, len;
      actionConfig = App.Config.get('TicketZoomArticleAction');
      keys = _.keys(actionConfig).sort();
      actions = [];
      for (i = 0, len = keys.length; i < len; i++) {
        key = keys[i];
        config = actionConfig[key];
        if (config) {
          actions = config.action(actions, ticket, article, this);
        }
      }
      return actions;
    };

    TicketZoomArticleActions.prototype.actionPerform = function(e) {
      var actionConfig, actions, article, articleContainer, config, i, key, keys, len, ticket, type;
      e.preventDefault();
      articleContainer = $(e.target).closest('.ticket-article-item');
      type = $(e.currentTarget).attr('data-type');
      ticket = App.Ticket.fullLocal(this.ticket.id);
      article = App.TicketArticle.fullLocal(this.article.id);
      actionConfig = App.Config.get('TicketZoomArticleAction');
      keys = _.keys(actionConfig).sort();
      actions = [];
      for (i = 0, len = keys.length; i < len; i++) {
        key = keys[i];
        config = actionConfig[key];
        if (config) {
          if (!config.perform(articleContainer, type, ticket, article, this)) {
            return;
          }
        }
      }
    };

    TicketZoomArticleActions.prototype.scrollToCompose = function() {
      return this.el.closest('.content').find('.article-add').ScrollTo();
    };

    return TicketZoomArticleActions;

  })(App.Controller);

}).call(this);
:ET