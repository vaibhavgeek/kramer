I" (function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  App.Setting = (function(superClass) {
    extend(Setting, superClass);

    function Setting() {
      return Setting.__super__.constructor.apply(this, arguments);
    }

    Setting.configure('Setting', 'name', 'state_current');

    Setting.extend(Spine.Model.Ajax);

    Setting.url = Setting.apiPath + '/settings';

    Setting.get = function(name) {
      var setting;
      setting = App.Setting.findByAttribute('name', name);
      if (!setting) {
        throw "No such setting '" + name + "' found!";
      }
      return setting.state_current.value;
    };

    Setting.set = function(name, value, options) {
      var setting;
      if (options == null) {
        options = {};
      }
      setting = App.Setting.findByAttribute('name', name);
      if (!setting) {
        throw "No such setting '" + name + "' found!";
      }
      setting.state_current.value = value;
      if (!options.done) {
        options.done = function() {
          if (options.notify) {
            App.Event.trigger('notify', {
              type: 'success',
              msg: App.i18n.translateContent('Update successful!'),
              timeout: 2000
            });
          }
          App.Setting.preferencesPost(this);
          if (options.doneLocal) {
            return options.doneLocal(this);
          }
        };
      }
      if (!options.fail) {
        options.fail = function(settings, details) {
          App.Event.trigger('notify', {
            type: 'error',
            msg: App.i18n.translateContent(details.error_human || details.error || 'Unable to update object!'),
            timeout: 2000
          });
          if (options.failLocal) {
            return options.failLocal(this);
          }
        };
      }
      if (setting.frontend) {
        App.Config.set(name, value);
      }
      return setting.save(options);
    };

    Setting.preferencesPost = function(setting) {
      var base, count, event, events, i, len, results;
      if (!setting.preferences) {
        return;
      }
      if (setting.preferences.render) {
        (base = setting.preferences).trigger || (base.trigger = []);
        setting.preferences.trigger.push('ui:rerender');
      }
      if (_.isEmpty(setting.preferences.trigger)) {
        return;
      }
      events = setting.preferences.trigger;
      if (!_.isArray(setting.preferences.trigger)) {
        events = [setting.preferences.trigger];
      }
      count = 0;
      results = [];
      for (i = 0, len = events.length; i < len; i++) {
        event = events[i];
        count += 1;
        results.push((function(event, count) {
          var delay;
          delay = function() {
            return App.Event.trigger(event);
          };
          return App.Delay.set(delay, 300 * count);
        })(event, count));
      }
      return results;
    };

    return Setting;

  })(App.Model);

}).call(this);
:ET