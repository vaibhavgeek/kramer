I"ú(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  App.TicketZoomTitle = (function(superClass) {
    extend(TicketZoomTitle, superClass);

    function TicketZoomTitle() {
      this.update = bind(this.update, this);
      this.renderPost = bind(this.renderPost, this);
      return TicketZoomTitle.__super__.constructor.apply(this, arguments);
    }

    TicketZoomTitle.prototype.model = 'Ticket';

    TicketZoomTitle.prototype.template = 'ticket_zoom/title';

    TicketZoomTitle.prototype.observe = {
      title: true
    };

    TicketZoomTitle.prototype.globalRerender = false;

    TicketZoomTitle.prototype.events = {
      'blur .js-objectTitle': 'update'
    };

    TicketZoomTitle.prototype.renderPost = function(object) {
      return this.$('.js-objectTitle').ce({
        mode: 'textonly',
        multiline: false,
        maxlength: 250
      });
    };

    TicketZoomTitle.prototype.update = function(e) {
      var ticket, title;
      title = $(e.target).ceg() || '';
      if (title === this.lastAttributres.title) {
        return;
      }
      ticket = App.Ticket.find(this.object_id);
      ticket.title = title;
      ticket.article = void 0;
      ticket.save();
      App.TaskManager.mute(this.taskKey);
      App.TaskManager.touch(this.taskKey);
      return App.Event.trigger('overview:fetch');
    };

    return TicketZoomTitle;

  })(App.ObserverController);

}).call(this);
:ET