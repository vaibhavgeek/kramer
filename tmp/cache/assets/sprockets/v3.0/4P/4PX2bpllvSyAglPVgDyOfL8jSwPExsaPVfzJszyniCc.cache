I"é(function() {
  var Index,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Index = (function(superClass) {
    extend(Index, superClass);

    Index.prototype.requiredPermission = 'user_preferences.password';

    Index.prototype.header = 'Password';

    Index.prototype.events = {
      'submit form': 'update'
    };

    function Index() {
      this.success = bind(this.success, this);
      this.update = bind(this.update, this);
      this.render = bind(this.render, this);
      Index.__super__.constructor.apply(this, arguments);
      this.render();
    }

    Index.prototype.render = function() {
      var configure_attributes, html;
      html = $(App.view('profile/password')());
      configure_attributes = [
        {
          name: 'password_old',
          display: 'Current password',
          tag: 'input',
          type: 'password',
          limit: 100,
          "null": false,
          "class": 'input',
          single: true
        }, {
          name: 'password_new',
          display: 'New password',
          tag: 'input',
          type: 'password',
          limit: 100,
          "null": false,
          "class": 'input'
        }
      ];
      this.form = new App.ControllerForm({
        el: html.find('.password_item'),
        model: {
          configure_attributes: configure_attributes
        },
        autofocus: false
      });
      return this.html(html);
    };

    Index.prototype.update = function(e) {
      var params;
      e.preventDefault();
      params = this.formParam(e.target);
      this.formDisable(e);
      if (params['password_new_confirm'] !== params['password_new']) {
        this.formEnable(e);
        this.$('[name=password_new]').val('');
        this.$('[name=password_new_confirm]').val('');
        this.notify({
          type: 'error',
          msg: 'Can\'t update password, your new passwords do not match. Please try again!',
          removeAll: true
        });
        return;
      }
      if (!params['password_new']) {
        this.formEnable(e);
        this.notify({
          type: 'error',
          msg: 'Please supply your new password!',
          removeAll: true
        });
        return;
      }
      return this.ajax({
        id: 'password_reset',
        type: 'POST',
        url: this.apiPath + '/users/password_change',
        data: JSON.stringify(params),
        processData: true,
        success: this.success
      });
    };

    Index.prototype.success = function(data) {
      if (data.message === 'ok') {
        this.render();
        return this.notify({
          type: 'success',
          msg: App.i18n.translateContent('Password changed successfully!')
        });
      } else {
        if (data.notice) {
          this.notify({
            type: 'error',
            msg: App.i18n.translateContent(data.notice[0], data.notice[1]),
            removeAll: true
          });
        } else {
          this.notify({
            type: 'error',
            msg: 'Unable to set password. Please contact your administrator.',
            removeAll: true
          });
        }
        return this.formEnable(this.$('form'));
      }
    };

    return Index;

  })(App.ControllerSubContent);

  App.Config.set('Password', {
    prio: 2000,
    name: 'Password',
    parent: '#profile',
    target: '#profile/password',
    controller: Index,
    permission: ['user_preferences.password']
  }, 'NavBarProfile');

}).call(this);
:ET