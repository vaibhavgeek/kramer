I"ä	(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  App.WidgetTextModule = (function(superClass) {
    extend(WidgetTextModule, superClass);

    function WidgetTextModule() {
      this.update = bind(this.update, this);
      this.reload = bind(this.reload, this);
      this.release = bind(this.release, this);
      WidgetTextModule.__super__.constructor.apply(this, arguments);
      if (!this.data) {
        this.data = {};
      }
      this.bindElements = [];
      if (this.selector) {
        this.bindElements = this.$(this.selector).textmodule();
      } else {
        if (this.el.attr('contenteditable')) {
          this.bindElements = this.el.textmodule();
        } else {
          this.bindElements = this.$('[contenteditable]').textmodule();
        }
      }
      this.update();
      this.subscribeId = App.TextModule.subscribe(this.update, {
        initFetch: true
      });
    }

    WidgetTextModule.prototype.release = function() {
      return App.TextModule.unsubscribe(this.subscribeId);
    };

    WidgetTextModule.prototype.reload = function(data) {
      if (!data) {
        return;
      }
      this.data = data;
      return this.update();
    };

    WidgetTextModule.prototype.update = function() {
      var all, allRaw, attributes, element, i, item, j, len, len1, ref, results;
      allRaw = App.TextModule.all();
      all = [];
      for (i = 0, len = allRaw.length; i < len; i++) {
        item = allRaw[i];
        if (item.active === true) {
          attributes = item.attributes();
          attributes.content = App.Utils.replaceTags(attributes.content, this.data);
          all.push(attributes);
        }
      }
      if (this.bindElements[0]) {
        ref = this.bindElements;
        results = [];
        for (j = 0, len1 = ref.length; j < len1; j++) {
          element = ref[j];
          if ($(element).data().plugin_textmodule) {
            results.push($(element).data().plugin_textmodule.collection = all);
          } else {
            results.push(void 0);
          }
        }
        return results;
      }
    };

    return WidgetTextModule;

  })(App.Controller);

}).call(this);
:ET