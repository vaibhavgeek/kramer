I"Ú(function() {
  var Widget,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Widget = (function(superClass) {
    extend(Widget, superClass);

    function Widget() {
      Widget.__super__.constructor.apply(this, arguments);
      this.bind();
    }

    Widget.prototype.bind = function() {
      App.Event.bind('spool:sent', (function(_this) {
        return function() {
          _this.spoolSent = true;
          return App.WebSocket.send({
            event: 'broadcast',
            spool: true,
            recipient: {
              user_id: [App.Session.get('id')]
            },
            data: {
              event: 'session:takeover',
              data: {
                taskbar_id: App.TaskManager.TaskbarId()
              }
            }
          });
        };
      })(this), 'maintenance');
      return App.Event.bind('session:takeover', (function(_this) {
        return function(data) {
          if (!_this.spoolSent) {
            return;
          }
          if (!_this.error) {
            if (data.taskbar_id !== App.TaskManager.TaskbarId()) {
              _this.error = new App.SessionMessage({
                head: 'Session',
                message: 'A new session was created with your account. This session will be stopped to prevent a conflict.',
                keyboard: false,
                backdrop: true,
                buttonClose: false,
                buttonSubmit: 'Continue session',
                forceReload: true
              });
              return _this.disconnectClient();
            }
          }
        };
      })(this), 'maintenance');
    };

    return Widget;

  })(App.Controller);

  App.Config.set('session_taken_over', Widget, 'Widgets');

}).call(this);
:ET