I"Â(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  App.UiElement.datetime = (function(superClass) {
    extend(datetime, superClass);

    function datetime() {
      return datetime.__super__.constructor.apply(this, arguments);
    }

    datetime.templateName = function() {
      return 'datetime';
    };

    datetime.applyPickers = function(item, attribute) {
      datetime.__super__.constructor.applyPickers.call(this, item, attribute);
      return item.find('.js-timepicker').timepicker();
    };

    datetime.currentInput = function(item, attribute) {
      var result;
      result = datetime.__super__.constructor.currentInput.call(this, item, attribute);
      if (_.isArray(result)) {
        result.push(item.find('.js-timepicker').val());
      }
      return result;
    };

    datetime.validateInput = function(currentInput) {
      return currentInput[0] !== '' || currentInput[1] !== '';
    };

    datetime.setNoTimestamp = function(item) {
      return item.find('.js-timepicker').val('08:00');
    };

    datetime.setTimestamp = function(item, timeObject) {
      var hour, minute, time;
      datetime.__super__.constructor.setTimestamp.call(this, item, timeObject);
      hour = timeObject.getHours();
      minute = timeObject.getMinutes();
      time = (App.Utils.formatTime(hour, 2)) + ":" + (App.Utils.formatTime(minute, 2));
      return item.find('.js-timepicker').val(time);
    };

    datetime.buildTimestamp = function(currentInput) {
      var time, timestamp;
      timestamp = currentInput[0] + "T" + currentInput[1] + ":00.000Z";
      time = new Date(Date.parse(timestamp));
      time.setMinutes(time.getMinutes() + time.getTimezoneOffset());
      this.log('setNewTime', time.toString());
      return time.toISOString().replace(/\d\d\.\d\d\dZ$/, '00.000Z');
    };

    datetime.dateSetter = function() {
      return 'setDate';
    };

    return datetime;

  })(App.UiElement.basedate);

}).call(this);
:ET