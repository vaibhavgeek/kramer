I"(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  App.GlobalSearchWidget = (function(superClass) {
    var shiftHeld;

    extend(GlobalSearchWidget, superClass);

    shiftHeld = false;

    function GlobalSearchWidget() {
      $('body').on('mousedown', (function(_this) {
        return function(e) {
          _this.shiftHeldToogle(e);
          return true;
        };
      })(this));
      App.Event.bind('global:search:set', (function(_this) {
        return function(data) {
          var attribute, currentValue, delay, item, searchAttribute;
          item = data[0];
          attribute = data[1];
          item = item.replace('"', '');
          if (item.match(/\W/)) {
            item = "\"" + item + "\"";
          }
          if (!attribute) {
            searchAttribute = "" + item;
          } else {
            searchAttribute = attribute + ":" + item;
          }
          currentValue = $('#global-search').val();
          if (_this.shiftHeld && currentValue) {
            currentValue += ' AND ';
            currentValue += searchAttribute;
          } else {
            currentValue = searchAttribute;
          }
          $('#global-search').val(currentValue);
          delay = function() {
            return $('#global-search').focus();
          };
          return App.Delay.set(delay, 20, 'global-search-delay');
        };
      })(this));
    }

    GlobalSearchWidget.prototype.shiftHeldToogle = function(e) {
      return this.shiftHeld = e.shiftKey;
    };

    GlobalSearchWidget.search = function(item, attribute) {
      return App.Event.trigger('global:search:set', [item, attribute]);
    };

    return GlobalSearchWidget;

  })(Spine.Module);

  App.Config.set('global_navigation', App.GlobalSearchWidget, 'Widgets');

}).call(this);
:ET