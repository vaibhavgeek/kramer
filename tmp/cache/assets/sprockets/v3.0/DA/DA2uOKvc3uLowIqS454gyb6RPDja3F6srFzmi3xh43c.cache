I"Q(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  App.InviteUser = (function(superClass) {
    extend(InviteUser, superClass);

    InviteUser.prototype.events = {
      'click  .js-close': 'hide',
      'submit .js-user': 'submit',
      'click  .js-goToSlide': 'goToSlide'
    };

    function InviteUser() {
      this.submit = bind(this.submit, this);
      this.render = bind(this.render, this);
      InviteUser.__super__.constructor.apply(this, arguments);
      if (this.container) {
        this.el.addClass('modal--local');
      }
      this.render();
      this.el.modal({
        keyboard: true,
        show: true,
        backdrop: true,
        container: this.container
      }).on({
        'hidden.bs.modal': (function(_this) {
          return function() {
            if (_this.callback) {
              _this.callback();
            }
            return _this.el.remove();
          };
        })(this)
      });
    }

    InviteUser.prototype.render = function() {
      var modal;
      modal = $(App.view('widget/invite_user')({
        head: this.head
      }));
      new App.ControllerForm({
        el: modal.find('.js-form'),
        model: App.User,
        screen: this.screen,
        autofocus: true
      });
      if (!this.initRenderingDone) {
        this.initRenderingDone = true;
        return this.html(modal);
      } else {
        return this.$('.modal-dialog').replaceWith(modal);
      }
    };

    InviteUser.prototype.submit = function(e) {
      var errors, role, user;
      e.preventDefault();
      this.showSlide('js-waiting');
      this.formDisable(e);
      this.params = this.formParam(e.target);
      this.params.invite = true;
      if (this.role) {
        role = App.Role.findByAttribute('name', this.role);
        if (role) {
          this.params.role_ids = role.id;
        }
      }
      user = new App.User;
      user.load(this.params);
      errors = user.validate({
        screen: this.screen
      });
      if (errors) {
        this.log('error new', errors);
        this.formValidate({
          form: e.target,
          errors: errors
        });
        this.formEnable(e);
        this.showSlide('js-user');
        return false;
      }
      return user.save({
        done: (function(_this) {
          return function(r) {
            _this.showSlide('js-success');
            return _this.el.modal('hide');
          };
        })(this),
        fail: (function(_this) {
          return function(settings, details) {
            _this.formEnable(e);
            _this.showSlide('js-user');
            return _this.showAlert('js-user', details.error_human || details.error);
          };
        })(this)
      });
    };

    return InviteUser;

  })(App.WizardModal);

}).call(this);
:ET