I"±(function() {
  var SidebarOrganization,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  SidebarOrganization = (function(superClass) {
    extend(SidebarOrganization, superClass);

    function SidebarOrganization() {
      this.editOrganization = bind(this.editOrganization, this);
      this.showOrganization = bind(this.showOrganization, this);
      this.sidebarItem = bind(this.sidebarItem, this);
      return SidebarOrganization.__super__.constructor.apply(this, arguments);
    }

    SidebarOrganization.prototype.sidebarItem = function() {
      if (!this.permissionCheck('ticket.agent')) {
        return;
      }
      if (!this.ticket.organization_id) {
        return;
      }
      this.item = {
        name: 'organization',
        badgeIcon: 'group',
        sidebarHead: 'Organization',
        sidebarCallback: this.showOrganization,
        sidebarActions: [
          {
            title: 'Edit Organization',
            name: 'organization-edit',
            callback: this.editOrganization
          }
        ]
      };
      return this.item;
    };

    SidebarOrganization.prototype.showOrganization = function(el) {
      this.elSidebar = el;
      return new App.WidgetOrganization({
        el: this.elSidebar,
        organization_id: this.ticket.organization_id
      });
    };

    SidebarOrganization.prototype.editOrganization = function() {
      return new App.ControllerGenericEdit({
        id: this.ticket.organization_id,
        genericObject: 'Organization',
        pageData: {
          title: 'Organizations',
          object: 'Organization',
          objects: 'Organizations'
        },
        container: this.elSidebar.closest('.content')
      });
    };

    return SidebarOrganization;

  })(App.Controller);

  App.Config.set('300-Organization', SidebarOrganization, 'TicketZoomSidebar');

}).call(this);
:ET