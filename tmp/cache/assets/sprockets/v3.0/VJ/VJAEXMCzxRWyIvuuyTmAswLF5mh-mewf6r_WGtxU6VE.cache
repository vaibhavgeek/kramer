I"þ
(function() {
  var Show,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  App.HttpLog = (function(superClass) {
    extend(HttpLog, superClass);

    HttpLog.prototype.events = {
      'click .js-record': 'show'
    };

    function HttpLog() {
      this.show = bind(this.show, this);
      this.render = bind(this.render, this);
      this.fetch = bind(this.fetch, this);
      HttpLog.__super__.constructor.apply(this, arguments);
      this.fetch();
      this.records = [];
    }

    HttpLog.prototype.fetch = function() {
      return this.ajax({
        id: 'http_logs',
        type: 'GET',
        url: this.apiPath + "/http_logs/" + this.facility,
        data: {
          limit: this.limit || 50
        },
        processData: true,
        success: (function(_this) {
          return function(data) {
            if (!_this.records[0] || (data[0] && _this.records[0] && data[0].updated_at !== _this.records[0].updated_at)) {
              _this.records = data;
              _this.render();
            }
            return _this.delay(_this.fetch, 20000);
          };
        })(this)
      });
    };

    HttpLog.prototype.render = function() {
      return this.html(App.view('widget/http_log')({
        records: this.records,
        description: this.description
      }));
    };

    HttpLog.prototype.show = function(e) {
      var i, len, record, record_id, ref;
      e.preventDefault();
      record_id = $(e.currentTarget).data('id');
      ref = this.records;
      for (i = 0, len = ref.length; i < len; i++) {
        record = ref[i];
        if (record_id.toString() === record.id.toString()) {
          new Show({
            record: record,
            container: this.el.closest('.content')
          });
          return;
        }
      }
    };

    return HttpLog;

  })(App.Controller);

  Show = (function(superClass) {
    extend(Show, superClass);

    Show.prototype.authenticateRequired = true;

    Show.prototype.large = true;

    Show.prototype.head = 'HTTP Log';

    Show.prototype.buttonClose = true;

    Show.prototype.buttonCancel = false;

    Show.prototype.buttonSubmit = false;

    function Show() {
      Show.__super__.constructor.apply(this, arguments);
    }

    Show.prototype.content = function() {
      console.log('cont');
      return App.view('widget/http_log_show')({
        record: this.record
      });
    };

    return Show;

  })(App.ControllerModal);

}).call(this);
:ET