I"¨(function() {
  var _sessionSingleton,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  App.Session = (function() {
    var _instance;

    function Session() {}

    _instance = void 0;

    Session.init = function() {
      if (_instance == null) {
        _instance = new _sessionSingleton;
      }
      return _instance.clear();
    };

    Session.get = function(key) {
      if (_instance === void 0) {
        if (_instance == null) {
          _instance = new _sessionSingleton;
        }
      }
      return _instance.get(key);
    };

    Session.set = function(user) {
      if (_instance === void 0) {
        if (_instance == null) {
          _instance = new _sessionSingleton;
        }
      }
      return _instance.set(user);
    };

    return Session;

  })();

  _sessionSingleton = (function(superClass) {
    extend(_sessionSingleton, superClass);

    _sessionSingleton.include(App.LogInclude);

    function _sessionSingleton() {
      this.clear();
    }

    _sessionSingleton.prototype.clear = function() {
      return this.user = void 0;
    };

    _sessionSingleton.prototype.get = function(key) {
      if (!this.user) {
        return;
      }
      if (key) {
        return this.user[key];
      }
      return this.user;
    };

    _sessionSingleton.prototype.set = function(user) {
      return this.user = user;
    };

    return _sessionSingleton;

  })(Spine.Module);

}).call(this);
:ET