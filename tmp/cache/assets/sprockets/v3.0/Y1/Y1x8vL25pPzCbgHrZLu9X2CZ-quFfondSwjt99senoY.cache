I"[(function() {
  var Index,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Index = (function(superClass) {
    extend(Index, superClass);

    Index.prototype.events = {
      'submit form': 'submit',
      'click .submit': 'submit',
      'click .cancel': 'cancel'
    };

    function Index() {
      this.error = bind(this.error, this);
      this.success = bind(this.success, this);
      this.submit = bind(this.submit, this);
      Index.__super__.constructor.apply(this, arguments);
      if (!this.Config.get('user_create_account')) {
        this.navigate('#');
        return;
      }
      this.navHide();
      this.title('Sign up');
      this.navupdate('#signup');
      this.render();
    }

    Index.prototype.render = function() {
      this.html(App.view('signup')());
      return this.form = new App.ControllerForm({
        el: this.el.find('form'),
        model: App.User,
        screen: 'signup',
        autofocus: true
      });
    };

    Index.prototype.cancel = function() {
      return this.navigate('#login');
    };

    Index.prototype.submit = function(e) {
      var errors, user;
      e.preventDefault();
      this.formDisable(e);
      this.params = this.formParam(e.target);
      if (!this.params.login && this.params.email) {
        this.params.login = this.params.email;
      }
      this.params.signup = true;
      this.params.role_ids = [];
      this.log('notice', 'updateAttributes', this.params);
      user = new App.User;
      user.load(this.params);
      errors = user.validate({
        screen: 'signup'
      });
      if (errors) {
        this.log('error new', errors);
        this.formValidate({
          form: e.target,
          errors: errors
        });
        this.formEnable(e);
        return false;
      }
      return user.save({
        done: (function(_this) {
          return function(r) {
            return App.Auth.login({
              data: {
                username: _this.params.login,
                password: _this.params.password
              },
              success: _this.success,
              error: _this.error
            });
          };
        })(this),
        fail: (function(_this) {
          return function(settings, details) {
            _this.formEnable(e);
            return _this.form.showAlert(details.error_human || details.error || 'Unable to update object!');
          };
        })(this)
      });
    };

    Index.prototype.success = function(data, status, xhr) {
      App.Auth.loginCheck();
      this.notify({
        type: 'success',
        msg: App.i18n.translateContent('Thanks for joining. Email sent to "%s". Please verify your email address.', this.params.email),
        removeAll: true
      });
      return this.navigate('#');
    };

    Index.prototype.error = function(xhr, statusText, error) {
      var details, detailsRaw;
      detailsRaw = xhr.responseText;
      details = {};
      if (!_.isEmpty(detailsRaw)) {
        details = JSON.parse(detailsRaw);
      }
      return this.notify({
        type: 'error',
        msg: App.i18n.translateContent(details.error || 'Wrong Username or Password combination.'),
        removeAll: true
      });
    };

    return Index;

  })(App.ControllerContent);

  App.Config.set('signup', Index, 'Routes');

}).call(this);
:ET