I"_(function() {
  var _storeSingleton;

  App.SessionStorage = (function() {
    var _instance;

    function SessionStorage() {}

    _instance = void 0;

    SessionStorage.set = function(key, value) {
      if (_instance === void 0) {
        if (_instance == null) {
          _instance = new _storeSingleton;
        }
      }
      return _instance.set(key, value);
    };

    SessionStorage.get = function(key) {
      if (_instance === void 0) {
        if (_instance == null) {
          _instance = new _storeSingleton;
        }
      }
      return _instance.get(key);
    };

    SessionStorage["delete"] = function(key) {
      if (_instance === void 0) {
        if (_instance == null) {
          _instance = new _storeSingleton;
        }
      }
      return _instance["delete"](key);
    };

    SessionStorage.clear = function() {
      if (_instance === void 0) {
        if (_instance == null) {
          _instance = new _storeSingleton;
        }
      }
      return _instance.clear();
    };

    SessionStorage.list = function() {
      if (_instance === void 0) {
        if (_instance == null) {
          _instance = new _storeSingleton;
        }
      }
      return _instance.list();
    };

    SessionStorage.usage = function() {
      if (_instance === void 0) {
        if (_instance == null) {
          _instance = new _storeSingleton;
        }
      }
      return _instance.usage();
    };

    return SessionStorage;

  })();

  _storeSingleton = (function() {
    function _storeSingleton() {
      App.Event.bind('clearStore', (function(_this) {
        return function() {
          return _this.clear();
        };
      })(this));
    }

    _storeSingleton.prototype.set = function(key, value) {
      var e;
      try {
        return sessionStorage.setItem(key, JSON.stringify(value));
      } catch (error) {
        e = error;
        this.clear();
        App.Log.error('App.SessionStorage', 'Session storage error!', e);
        return sessionStorage.setItem(key, JSON.stringify(value));
      }
    };

    _storeSingleton.prototype.get = function(key) {
      var value;
      value = sessionStorage.getItem(key);
      if (!value) {
        return;
      }
      return JSON.parse(value);
    };

    _storeSingleton.prototype["delete"] = function(key) {
      return sessionStorage.removeItem(key);
    };

    _storeSingleton.prototype.clear = function() {
      return sessionStorage.clear();
    };

    _storeSingleton.prototype.list = function() {
      return window.sessionStorage;
    };

    _storeSingleton.prototype.usage = function() {
      var key, total, value;
      total = '';
      for (key in window.sessionStorage) {
        value = sessionStorage.getItem(key);
        if (_.isString(value)) {
          total += value;
        }
      }
      return byteLength(total);
    };

    return _storeSingleton;

  })();

}).call(this);
:ET