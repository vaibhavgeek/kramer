I"(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  App.Role = (function(superClass) {
    extend(Role, superClass);

    function Role() {
      return Role.__super__.constructor.apply(this, arguments);
    }

    Role.configure('Role', 'name', 'permission_ids', 'group_ids', 'default_at_signup', 'note', 'active', 'updated_at');

    Role.extend(Spine.Model.Ajax);

    Role.url = Role.apiPath + '/roles';

    Role.configure_attributes = [
      {
        name: 'name',
        display: 'Name',
        tag: 'input',
        type: 'text',
        limit: 100,
        "null": false
      }, {
        name: 'permission_ids',
        display: 'Permissions',
        tag: 'permission',
        item_class: 'checkbox'
      }, {
        name: 'default_at_signup',
        display: 'Default at Signup',
        tag: 'boolean',
        "default": false,
        translate: true
      }, {
        name: 'note',
        display: 'Note',
        tag: 'textarea',
        note: 'Notes are visible to agents only, never to customers.',
        limit: 250,
        "null": true
      }, {
        name: 'active',
        display: 'Active',
        tag: 'active',
        "default": true
      }, {
        name: 'created_by_id',
        display: 'Created by',
        relation: 'User',
        readonly: 1
      }, {
        name: 'created_at',
        display: 'Created',
        tag: 'datetime',
        readonly: 1
      }, {
        name: 'updated_by_id',
        display: 'Updated by',
        relation: 'User',
        readonly: 1
      }, {
        name: 'updated_at',
        display: 'Updated',
        tag: 'datetime',
        readonly: 1
      }
    ];

    Role.configure_clone = true;

    Role.configure_overview = ['name', 'default_at_signup'];

    Role.prototype.activityMessage = function(item) {
      if (item.type === 'create') {
        return App.i18n.translateContent('%s created Role |%s|', item.created_by.displayName(), item.title);
      } else if (item.type === 'update') {
        return App.i18n.translateContent('%s updated Role |%s|', item.created_by.displayName(), item.title);
      }
      return "Unknow action for (" + (this.objectDisplayName()) + "/" + item.type + "), extend activityMessage() of model.";
    };

    Role._fillUp = function(data) {
      var i, len, permission, permission_id, ref;
      if (data['permission_ids']) {
        data['permissions'] = [];
        ref = data['permission_ids'];
        for (i = 0, len = ref.length; i < len; i++) {
          permission_id = ref[i];
          if (App.Permission.exists(permission_id)) {
            permission = App.Permission.findNative(permission_id);
            data['permissions'].push(permission);
          }
        }
      }
      return data;
    };

    return Role;

  })(App.Model);

}).call(this);
:ET