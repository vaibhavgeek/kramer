I"•(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  App.Notify = (function(superClass) {
    extend(Notify, superClass);

    Notify.prototype.desktopNotify = {};

    Notify.prototype.desktopNotifyCounter = 0;

    Notify.prototype.events = {
      'click .alert': 'destroy'
    };

    function Notify() {
      Notify.__super__.constructor.apply(this, arguments);
      this.bind('notify', (function(_this) {
        return function(data) {
          return _this.render(data);
        };
      })(this));
      this.bind('notify:removeall', (function(_this) {
        return function() {
          _this.log('notify:removeall', _this);
          return _this.destroyAll();
        };
      })(this));
      this.bind('notifyDesktop', (function(_this) {
        return function(data) {
          var counter, notification, timeout;
          if (!window.Notification) {
            return;
          }
          if (!data['icon']) {
            data['icon'] = _this.logoUrl();
          }
          timeout = 60000 * 60 * 24;
          if (document.hasFocus()) {
            timeout = 4000;
          }
          _this.desktopNotifyCounter += 1;
          counter = _this.desktopNotifyCounter;
          data.silent = true;
          notification = new window.Notification(data.title, data);
          _this.desktopNotify[counter] = notification;
          _this.log('debug', 'notifyDesktop', data, counter);
          notification.onclose = function(e) {
            return delete _this.desktopNotify[counter];
          };
          notification.onclick = function(e) {
            window.focus();
            _this.log('debug', 'notifyDesktop.click', data);
            if (data.url) {
              _this.locationExecuteOrNavigate(data.url);
            }
            if (data.callback) {
              return data.callback();
            }
          };
          if (data.timeout || timeout) {
            return App.Delay.set(function() {
              return notification.close();
            }, data.timeout || timeout);
          }
        };
      })(this));
      this.bind('auth', function(data) {
        if (!_.isEmpty(data)) {
          if (!window.Notification) {
            return;
          }
          return window.Notification.requestPermission();
        }
      });
      $(window).focus((function(_this) {
        return function() {
          var counter, notification, ref, results;
          ref = _this.desktopNotify;
          results = [];
          for (counter in ref) {
            notification = ref[counter];
            results.push(notification.close());
          }
          return results;
        };
      })(this));
    }

    Notify.prototype.render = function(data) {
      if (data['type'] === 'info') {
        data['type'] = 'information';
      }
      if (data['type'] === 'warning') {
        data['type'] = 'alert';
      }
      if (data['removeAll']) {
        $.noty.closeAll();
      }
      if (data.link) {
        data.msg = '<a href="' + data.link + '">' + data.msg + '</a>';
      }
      return $('#notify').noty({
        text: data.msg,
        type: data.type,
        template: App.view('notify')({
          type: data.type
        }),
        animation: {
          open: 'animated fadeInDown',
          close: 'animated fadeOutDown'
        },
        timeout: data.timeout || 3800,
        closeWith: ['click']
      });
    };

    Notify.prototype.destroy = function(e) {
      return e.preventDefault();
    };

    Notify.prototype.destroyAll = function() {
      return $.noty.closeAll();
    };

    return Notify;

  })(App.ControllerWidgetPermanent);

  App.Config.set('notify', App.Notify, 'Widgets');

}).call(this);
:ET