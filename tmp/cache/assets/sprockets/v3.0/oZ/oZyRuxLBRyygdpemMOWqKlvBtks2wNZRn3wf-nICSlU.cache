I"–	(function() {
  var Widget,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Widget = (function(superClass) {
    extend(Widget, superClass);

    Widget.prototype.className = 'switchBackToUser';

    function Widget() {
      this.switchBack = bind(this.switchBack, this);
      Widget.__super__.constructor.apply(this, arguments);
      this.bind('app:ready', (function(_this) {
        return function() {
          return _this.render();
        };
      })(this));
      this.bind('ui:rerender', (function(_this) {
        return function() {
          return _this.render();
        };
      })(this));
      this.bind('auth:logout', (function(_this) {
        return function() {
          App.Config.set('switch_back_to_possible', false);
          return _this.render();
        };
      })(this));
    }

    Widget.prototype.render = function(user) {
      if (!App.Config.get('switch_back_to_possible') || !App.Session.get()) {
        this.element().remove();
        return;
      }
      this.html(App.view('widget/switch_back_to_user')());
      return this.element().on('click', '.js-close', (function(_this) {
        return function(e) {
          return _this.switchBack(e);
        };
      })(this));
    };

    Widget.prototype.switchBack = function(e) {
      e.preventDefault();
      this.disconnectClient();
      $('#app').hide().attr('style', 'display: none!important');
      return this.delay((function(_this) {
        return function() {
          App.Auth._logout(false);
          return _this.ajax({
            id: 'user_switch_back',
            type: 'GET',
            url: _this.apiPath + "/sessions/switch_back",
            success: function(data, status, xhr) {
              var location;
              location = window.location.protocol + "//" + window.location.host + data.location;
              return _this.windowReload(void 0, location);
            }
          });
        };
      })(this), 800);
    };

    return Widget;

  })(App.ControllerWidgetOnDemand);

  App.Config.set('switch_back_to_user', Widget, 'Widgets');

}).call(this);
:ET