I"²(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  App.TicketList = (function(superClass) {
    extend(TicketList, superClass);

    function TicketList() {
      this.render = bind(this.render, this);
      TicketList.__super__.constructor.apply(this, arguments);
      this.render();
    }

    TicketList.prototype.render = function() {
      var callbackIcon, callbackIconHeader, callbackLinkToTicket, callbackOrganizationPopover, callbackTicketTitleAdd, callbackUserPopover, i, len, list, openTicket, ref, ticketItem, ticket_id;
      openTicket = (function(_this) {
        return function(id, e) {
          var ticket;
          ticket = App.Ticket.findNative(id);
          return _this.navigate(ticket.uiUrl());
        };
      })(this);
      callbackTicketTitleAdd = function(value, object, attribute, attributes) {
        attribute.title = object.title;
        return value;
      };
      callbackLinkToTicket = function(value, object, attribute, attributes) {
        attribute.link = object.uiUrl();
        return value;
      };
      callbackUserPopover = function(value, object, attribute, attributes) {
        var refObjectId;
        if (!object) {
          return value;
        }
        refObjectId = void 0;
        if (attribute.name === 'customer_id') {
          refObjectId = object.customer_id;
        }
        if (attribute.name === 'owner_id') {
          refObjectId = object.owner_id;
        }
        if (!refObjectId) {
          return value;
        }
        attribute["class"] = 'user-popover';
        attribute.data = {
          id: refObjectId
        };
        return value;
      };
      callbackOrganizationPopover = function(value, object, attribute, attributes) {
        if (!object) {
          return value;
        }
        if (!object.organization_id) {
          return value;
        }
        attribute["class"] = 'organization-popover';
        attribute.data = {
          id: object.organization_id
        };
        return value;
      };
      callbackIconHeader = function(headers) {
        var attribute;
        attribute = {
          name: 'icon',
          display: '',
          translation: false,
          width: '28px',
          displayWidth: 28,
          unresizable: true
        };
        headers.unshift(0);
        headers[0] = attribute;
        return headers;
      };
      callbackIcon = function(value, object, attribute, header) {
        value = ' ';
        attribute["class"] = object.iconClass();
        attribute.link = '';
        attribute.title = object.iconTitle();
        return value;
      };
      list = [];
      ref = this.ticket_ids;
      for (i = 0, len = ref.length; i < len; i++) {
        ticket_id = ref[i];
        ticketItem = App.Ticket.fullLocal(ticket_id);
        list.push(ticketItem);
      }
      this.el.html('');
      new App.ControllerTable({
        tableId: this.tableId,
        el: this.el,
        overview: this.columns || ['number', 'title', 'customer', 'group', 'created_at'],
        model: App.Ticket,
        objects: list,
        callbackHeader: [callbackIconHeader],
        callbackAttributes: {
          icon: [callbackIcon],
          customer_id: [callbackUserPopover],
          organization_id: [callbackOrganizationPopover],
          owner_id: [callbackUserPopover],
          title: [callbackLinkToTicket, callbackTicketTitleAdd],
          number: [callbackLinkToTicket, callbackTicketTitleAdd]
        },
        radio: this.radio
      });
      this.userPopups();
      return this.organizationPopups();
    };

    return TicketList;

  })(App.Controller);

}).call(this);
:ET