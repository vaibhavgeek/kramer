I"•function(__obj) {
  if (!__obj) __obj = {};
  var __out = [], __capture = function(callback) {
    var out = __out, result;
    __out = [];
    callback.call(this);
    result = __out.join('');
    __out = out;
    return __safe(result);
  }, __sanitize = function(value) {
    if (value && value.ecoSafe) {
      return value;
    } else if (typeof value !== 'undefined' && value != null) {
      return __escape(value);
    } else {
      return '';
    }
  }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
  __safe = __obj.safe = function(value) {
    if (value && value.ecoSafe) {
      return value;
    } else {
      if (!(typeof value !== 'undefined' && value != null)) value = '';
      var result = new String(value);
      result.ecoSafe = true;
      return result;
    }
  };
  if (!__escape) {
    __escape = __obj.escape = function(value) {
      return ('' + value)
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;');
    };
  }
  (function() {
    (function() {
      var chat, count, i, j, len, ref;
    
      __out.push('<div class="select form-group">\n  <label for="a">');
    
      __out.push(this.T('Max. concurrent chats'));
    
      __out.push('</label>\n  <div class="u-positionOrigin">\n    <select id="a" class="form-control" name="chat::max_windows">\n      ');
    
      for (count = i = 1; i <= 20; count = ++i) {
        __out.push('\n        <option value="');
        __out.push(count);
        __out.push('" ');
        if (parseInt(this.preferences.chat.max_windows) === count) {
          __out.push('selected');
        }
        __out.push('>');
        __out.push(count);
        __out.push('</option>\n      ');
      }
    
      __out.push('\n    </select>\n    ');
    
      __out.push(this.Icon('arrow-down', 'dropdown-arrow'));
    
      __out.push('\n  </div>\n</div>\n');
    
      if (this.errors.settings) {
        __out.push('\n<div class="alert alert--danger">');
        __out.push(this.T(this.errors.settings));
        __out.push('</div>\n');
      }
    
      __out.push('\n<table class="settings-list">\n  <thead>\n    <tr>\n      <th>');
    
      __out.push(this.T('Topic'));
    
      __out.push('\n      <th width="100%">');
    
      __out.push(this.T('Greeting'));
    
      __out.push(' (');
    
      __out.push(this.T('Separate multiple values by ;'));
    
      __out.push(')\n      <th>');
    
      __out.push(this.T('Enabled'));
    
      __out.push('\n    </th></tr>\n  </thead>\n');
    
      ref = this.chats;
      for (j = 0, len = ref.length; j < len; j++) {
        chat = ref[j];
        __out.push('\n    <tr>\n      <td>');
        __out.push(__sanitize(chat.name));
        __out.push('\n      <td class="settings-list-control-cell"><label class="inline-label"><input name="chat::phrase::');
        __out.push(chat.id);
        __out.push('" value="');
        __out.push(__sanitize(this.preferences.chat.phrase[chat.id]));
        __out.push('" class="form-control form-control--small" placeholder="');
        __out.push(this.T('Hello, my name is %s, what can I do for you?', App.Session.get('firstname')));
        __out.push('"/></label>\n      <td class="u-positionOrigin">\n        <label class="checkbox-replacement checkbox-replacement--fullscreen">\n            <input type="checkbox" name="chat::active::');
        __out.push(chat.id);
        __out.push('" ');
        if (this.preferences.chat.active[chat.id]) {
          __out.push('checked');
        }
        __out.push('>\n            ');
        __out.push(this.Icon('checkbox', 'icon-unchecked'));
        __out.push('\n            ');
        __out.push(this.Icon('checkbox-checked', 'icon-checked'));
        __out.push('\n        </label>\n');
      }
    
      __out.push('\n  </tbody>\n</table>\n');
    
    }).call(this);
    
  }).call(__obj);
  __obj.safe = __objSafe, __obj.escape = __escape;
  return __out.join('');
}:ET