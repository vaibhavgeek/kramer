I"¨(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  App.UiElement.permission = (function(superClass) {
    extend(permission, superClass);

    function permission() {
      return permission.__super__.constructor.apply(this, arguments);
    }

    permission.render = function(attribute, params) {
      var group, group_id, groups, groupsRaw, groupsSelected, i, item, j, len, len1, permissions, ref;
      if (params == null) {
        params = {};
      }
      permissions = App.Permission.search({
        sortBy: 'name'
      });
      groups = [];
      groupsSelected = {};
      groupsRaw = App.Group.search({
        sortBy: 'name'
      });
      for (i = 0, len = groupsRaw.length; i < len; i++) {
        group = groupsRaw[i];
        if (group.active) {
          groups.push(group);
          if (params.group_ids) {
            ref = params.group_ids;
            for (j = 0, len1 = ref.length; j < len1; j++) {
              group_id = ref[j];
              if (group_id.toString() === group.id.toString()) {
                groupsSelected[group.id] = true;
              }
            }
          }
        }
      }
      item = $(App.view('generic/permission')({
        attribute: attribute,
        params: params,
        permissions: permissions,
        groups: groups,
        groupsSelected: groupsSelected,
        groupAccesses: App.Group.accesses()
      }));
      item.find('[name=permission_ids]').bind('change', function(e) {
        var checked, element, k, l, len2, len3, localElement, localPermission, lookupPermission, permission, permission_id, ref1, regexp, results;
        element = $(e.currentTarget);
        checked = element.prop('checked');
        permission_id = element.prop('value');
        if (!permission_id) {
          return;
        }
        permission = App.Permission.find(permission_id);
        if (!permission) {
          return;
        }
        if (!permission.name.match(/\./)) {
          for (k = 0, len2 = permissions.length; k < len2; k++) {
            localPermission = permissions[k];
            regexp = new RegExp("^" + permission.name);
            if (localPermission.name.match(regexp)) {
              localElement = item.find("[name=permission_ids][value=" + localPermission.id + "]").closest('.js-subPermissionList');
              if (checked) {
                localElement.addClass('hide');
              } else {
                localElement.removeClass('hide');
              }
            }
          }
        }
        if (checked && permission.preferences.not) {
          ref1 = permission.preferences.not;
          results = [];
          for (l = 0, len3 = ref1.length; l < len3; l++) {
            localPermission = ref1[l];
            lookupPermission = App.Permission.findByAttribute('name', localPermission);
            if (lookupPermission) {
              results.push(item.find("[name=permission_ids][value=" + lookupPermission.id + "]").prop('checked', false));
            } else {
              results.push(void 0);
            }
          }
          return results;
        }
      });
      return item;
    };

    return permission;

  })(App.UiElement.ApplicationUiElement);

}).call(this);
:ET