I"M(function() {
  var System,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  System = (function(superClass) {
    extend(System, superClass);

    System.prototype.requiredPermission = 'admin.setting_system';

    System.prototype.header = 'System';

    function System() {
      System.__super__.constructor.apply(this, arguments);
      this.title('System', true);
      this.tabs = [];
      if (!App.Config.get('system_online_service')) {
        this.tabs.push({
          name: 'Base',
          'target': 'base',
          controller: App.SettingsArea,
          params: {
            area: 'System::Base'
          }
        });
      }
      this.tabs.push({
        name: 'Services',
        'target': 'services',
        controller: App.SettingsArea,
        params: {
          area: 'System::Services'
        }
      });
      if (!App.Config.get('system_online_service')) {
        this.tabs.push({
          name: 'Storage',
          'target': 'storage',
          controller: App.SettingsArea,
          params: {
            area: 'System::Storage'
          }
        });
      }
      if (!App.Config.get('system_online_service')) {
        this.tabs.push({
          name: 'Network',
          'target': 'network',
          controller: App.SettingsArea,
          params: {
            area: 'System::Network'
          }
        });
      }
      this.tabs.push({
        name: 'Frontend',
        'target': 'ui',
        controller: App.SettingsArea,
        params: {
          area: 'System::UI'
        }
      });
      this.render();
    }

    return System;

  })(App.ControllerTabs);

  App.Config.set('SettingSystem', {
    prio: 1400,
    parent: '#settings',
    name: 'System',
    target: '#settings/system',
    controller: System,
    permission: ['admin.setting_system']
  }, 'NavBarAdmin');

}).call(this);
:ET