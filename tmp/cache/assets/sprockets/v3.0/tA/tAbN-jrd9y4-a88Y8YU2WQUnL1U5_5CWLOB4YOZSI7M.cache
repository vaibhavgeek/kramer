I"ÿ(function() {
  var Index,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Index = (function(superClass) {
    extend(Index, superClass);

    Index.prototype.requiredPermission = 'admin.integration';

    Index.prototype.header = 'Integrations';

    function Index() {
      this.release = bind(this.release, this);
      this.render = bind(this.render, this);
      this.show = bind(this.show, this);
      Index.__super__.constructor.apply(this, arguments);
      this.integrationItems = App.Config.get('NavBarIntegrations');
      this.subscribeId = App.Setting.subscribe(this.render, {
        initFetch: true,
        clear: false
      });
    }

    Index.prototype.show = function(params) {
      var config, key, ref, value;
      if (this.initRender) {
        if (!params.target && !params.integration) {
          return;
        }
      }
      this.target = params.target;
      this.integration = params.integration;
      if (!this.initRender) {
        this.requestedIntegration = true;
        return;
      }
      if (!this.integration) {
        if (!params.noRender) {
          this.render();
        }
        return;
      }
      ref = this.integrationItems;
      for (key in ref) {
        value = ref[key];
        if (value.target === ("#system/" + params.target + "/" + params.integration)) {
          config = value;
          break;
        }
      }
      return new config.controller({
        el: this.el
      });
    };

    Index.prototype.render = function() {
      var i, integrations, key, len, match, permissionName, ref, ref1, value;
      if (this.initRender && this.integration) {
        return;
      }
      this.user = App.User.find(App.Session.get('id'));
      this.initRender = true;
      integrations = [];
      ref = this.integrationItems;
      for (key in ref) {
        value = ref[key];
        if (!value.permission) {
          value.key = key;
          integrations.push(value);
        } else {
          match = false;
          ref1 = value.permission;
          for (i = 0, len = ref1.length; i < len; i++) {
            permissionName = ref1[i];
            if (!match && this.user.permission(permissionName)) {
              match = true;
              value.key = key;
              integrations.push(value);
            }
          }
        }
      }
      integrations = _.sortBy(integrations, function(item) {
        return item.name;
      });
      this.html(App.view('integration/index')({
        head: 'Integrations',
        integrations: integrations
      }));
      if (!this.requestedIntegration) {
        return;
      }
      this.show({
        target: this.target,
        integration: this.integration,
        noRender: true
      });
      return this.requestedIntegration = void 0;
    };

    Index.prototype.release = function() {
      if (this.subscribeId) {
        return App.Setting.unsubscribe(this.subscribeId);
      }
    };

    return Index;

  })(App.ControllerSubContent);

  App.Config.set('Integration', {
    prio: 1000,
    name: 'Integrations',
    parent: '#system',
    target: '#system/integration',
    controller: Index,
    permission: ['admin.integration']
  }, 'NavBarAdmin');

}).call(this);
:ET