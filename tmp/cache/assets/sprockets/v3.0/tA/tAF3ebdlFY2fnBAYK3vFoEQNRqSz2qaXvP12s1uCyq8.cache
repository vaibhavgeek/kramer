I"Î(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  App.SettingsAreaLogo = (function(superClass) {
    extend(SettingsAreaLogo, superClass);

    SettingsAreaLogo.prototype.elements = {
      '.logo-preview': 'logoPreview'
    };

    SettingsAreaLogo.prototype.events = {
      'submit form': 'submit',
      'change .js-upload': 'onLogoPick'
    };

    function SettingsAreaLogo() {
      this.submit = bind(this.submit, this);
      this.onLogoPick = bind(this.onLogoPick, this);
      SettingsAreaLogo.__super__.constructor.apply(this, arguments);
      this.render();
    }

    SettingsAreaLogo.prototype.render = function() {
      var localElement;
      localElement = $(App.view('settings/logo')({
        setting: this.setting
      }));
      localElement.find('.js-loginPreview').html(App.view('generic/login_preview')({
        logoUrl: this.logoUrl(),
        logoChange: true,
        maintananceChange: false
      }));
      return this.html(localElement);
    };

    SettingsAreaLogo.prototype.onLogoPick = function(event) {
      var file, maxSiteInMb, reader;
      reader = new FileReader();
      reader.onload = (function(_this) {
        return function(e) {
          return _this.logoPreview.attr('src', e.target.result);
        };
      })(this);
      file = event.target.files[0];
      if (!file) {
        return;
      }
      maxSiteInMb = 8;
      if (file.size && file.size > 1024 * 1024 * maxSiteInMb) {
        App.Event.trigger('notify', {
          type: 'error',
          msg: App.i18n.translateContent('File too big, max. %s MB allowed.', maxSiteInMb),
          timeout: 2000
        });
        this.logoPreview.attr('src', '');
        return;
      }
      return reader.readAsDataURL(file);
    };

    SettingsAreaLogo.prototype.submit = function(e) {
      var store;
      e.preventDefault();
      this.formDisable(e);
      this.params = this.formParam(e.target);
      this.params.logo = this.logoPreview.attr('src');
      store = (function(_this) {
        return function(logoResizeDataUrl) {
          _this.params.logo_resize = logoResizeDataUrl;
          return _this.ajax({
            id: "setting_image_" + _this.setting.id,
            type: 'PUT',
            url: _this.apiPath + "/settings/image/" + _this.setting.id,
            data: JSON.stringify(_this.params),
            processData: true,
            success: function(data, status, xhr) {
              var i, len, ref, results, setting, value;
              _this.formEnable(e);
              if (data.result === 'ok') {
                App.Event.trigger('notify', {
                  type: 'success',
                  msg: App.i18n.translateContent('Update successful!'),
                  timeout: 2000
                });
                ref = data.settings;
                results = [];
                for (i = 0, len = ref.length; i < len; i++) {
                  setting = ref[i];
                  value = App.Setting.get(setting.name);
                  results.push(App.Config.set(name, value));
                }
                return results;
              } else {
                return App.Event.trigger('notify', {
                  type: 'error',
                  msg: App.i18n.translateContent(data.message),
                  timeout: 2000
                });
              }
            },
            fail: function() {
              return _this.formEnable(e);
            }
          });
        };
      })(this);
      return App.ImageService.resizeForApp(this.params.logo, this.logoPreview.width(), this.logoPreview.height(), store);
    };

    return SettingsAreaLogo;

  })(App.Controller);

}).call(this);
:ET