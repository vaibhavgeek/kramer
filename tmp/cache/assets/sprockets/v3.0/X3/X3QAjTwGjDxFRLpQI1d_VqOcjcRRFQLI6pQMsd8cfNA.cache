I"(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  App.Organization = (function(superClass) {
    extend(Organization, superClass);

    function Organization() {
      return Organization.__super__.constructor.apply(this, arguments);
    }

    Organization.configure('Organization', 'name', 'shared', 'note', 'member_ids', 'active', 'updated_at');

    Organization.extend(Spine.Model.Ajax);

    Organization.url = Organization.apiPath + '/organizations';

    Organization.configure_attributes = [
      {
        name: 'name',
        display: 'Name',
        tag: 'input',
        type: 'text',
        limit: 100,
        "null": false,
        info: true
      }, {
        name: 'shared',
        display: 'Shared organization',
        tag: 'boolean',
        note: 'Customers in the organization can view each other items.',
        type: 'boolean',
        "default": true,
        "null": false,
        info: false
      }, {
        name: 'created_by_id',
        display: 'Created by',
        relation: 'User',
        readonly: 1,
        info: false
      }, {
        name: 'created_at',
        display: 'Created at',
        tag: 'datetime',
        readonly: 1,
        info: false
      }, {
        name: 'updated_by_id',
        display: 'Updated by',
        relation: 'User',
        readonly: 1,
        info: false
      }, {
        name: 'updated_at',
        display: 'Updated at',
        tag: 'datetime',
        readonly: 1,
        info: false
      }
    ];

    Organization.configure_clone = true;

    Organization.configure_overview = ['name', 'shared'];

    Organization.description = 'Using **Organisations** you can **group** customers. This has among others two important benefits:\n\n1. As an **Agent** you do not only have an overview of the open tickets for one person but an **overview over their whole organisation**.\n2. As a **Customer** you can also check the **Tickets which your colleagues created** and modify their tickets (if your organization is set to "shared", which can be defined per organization)).';

    Organization.prototype.uiUrl = function() {
      return "#organization/profile/" + this.id;
    };

    Organization.prototype.icon = function() {
      return 'organization';
    };

    Organization._fillUp = function(data) {
      var i, len, ref, user, user_id;
      if (data['member_ids']) {
        data['members'] = [];
        ref = data['member_ids'];
        for (i = 0, len = ref.length; i < len; i++) {
          user_id = ref[i];
          if (App.User.exists(user_id)) {
            user = App.User.findNative(user_id);
            data['members'].push(user);
          }
        }
      }
      return data;
    };

    Organization.prototype.searchResultAttributes = function() {
      return {
        display: "" + (this.displayName()),
        id: this.id,
        "class": 'organization organization-popover',
        url: this.uiUrl(),
        icon: 'organization'
      };
    };

    Organization.prototype.activityMessage = function(item) {
      if (item.type === 'create') {
        return App.i18n.translateContent('%s created Organization |%s|', item.created_by.displayName(), item.title);
      } else if (item.type === 'update') {
        return App.i18n.translateContent('%s updated Organization |%s|', item.created_by.displayName(), item.title);
      }
      return "Unknow action for (" + (this.objectDisplayName()) + "/" + item.type + "), extend activityMessage() of model.";
    };

    return Organization;

  })(App.Model);

}).call(this);
:ET