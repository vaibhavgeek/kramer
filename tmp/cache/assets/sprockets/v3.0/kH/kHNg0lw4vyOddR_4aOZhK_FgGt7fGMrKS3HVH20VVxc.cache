I"×(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  App.TicketZoomSidebar = (function(superClass) {
    extend(TicketZoomSidebar, superClass);

    function TicketZoomSidebar() {
      this.render = bind(this.render, this);
      this.postParams = bind(this.postParams, this);
      this.commit = bind(this.commit, this);
      this.reload = bind(this.reload, this);
      return TicketZoomSidebar.__super__.constructor.apply(this, arguments);
    }

    TicketZoomSidebar.prototype.model = 'Ticket';

    TicketZoomSidebar.prototype.observe = {
      customer_id: true,
      organization_id: true
    };

    TicketZoomSidebar.prototype.reload = function(args) {
      var backend, key, ref, results;
      ref = this.sidebarBackends;
      results = [];
      for (key in ref) {
        backend = ref[key];
        if (backend && backend.reload) {
          results.push(backend.reload(args));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    TicketZoomSidebar.prototype.commit = function(args) {
      var backend, key, ref, results;
      ref = this.sidebarBackends;
      results = [];
      for (key in ref) {
        backend = ref[key];
        if (backend && backend.commit) {
          results.push(backend.commit(args));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    TicketZoomSidebar.prototype.postParams = function(args) {
      var backend, key, ref, results;
      ref = this.sidebarBackends;
      results = [];
      for (key in ref) {
        backend = ref[key];
        if (backend && backend.postParams) {
          results.push(backend.postParams(args));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    TicketZoomSidebar.prototype.render = function(ticket) {
      var i, key, keys, len, sidebarBackends;
      this.sidebarBackends || (this.sidebarBackends = {});
      this.sidebarItems = [];
      sidebarBackends = App.Config.get('TicketZoomSidebar');
      keys = _.keys(sidebarBackends).sort();
      for (i = 0, len = keys.length; i < len; i++) {
        key = keys[i];
        if (!this.sidebarBackends[key] || !this.sidebarBackends[key].reload) {
          this.sidebarBackends[key] = new sidebarBackends[key]({
            ticket: ticket,
            query: this.query,
            taskGet: this.taskGet,
            taskKey: this.taskKey,
            formMeta: this.formMeta,
            markForm: this.markForm,
            tags: this.tags,
            links: this.links
          });
        } else {
          this.sidebarBackends[key].reload({
            params: this.params,
            query: this.query,
            formMeta: this.formMeta,
            markForm: this.markForm,
            tags: this.tags,
            links: this.links
          });
        }
        this.sidebarItems.push(this.sidebarBackends[key]);
      }
      return new App.Sidebar({
        el: this.el.find('.tabsSidebar'),
        sidebarState: this.sidebarState,
        items: this.sidebarItems
      });
    };

    return TicketZoomSidebar;

  })(App.ObserverController);

}).call(this);
:ET