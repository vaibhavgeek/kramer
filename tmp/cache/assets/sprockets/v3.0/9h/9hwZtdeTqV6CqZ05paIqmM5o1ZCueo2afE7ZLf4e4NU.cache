I"€(function() {
  var Modal,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  App.TicketZoomSetting = (function(superClass) {
    extend(TicketZoomSetting, superClass);

    TicketZoomSetting.prototype.events = {
      'click .js-setting': 'show'
    };

    function TicketZoomSetting() {
      TicketZoomSetting.__super__.constructor.apply(this, arguments);
      if (!this.permissionCheck('admin')) {
        return;
      }
      this.render();
    }

    TicketZoomSetting.prototype.render = function() {
      return this.html(App.view('ticket_zoom/setting')());
    };

    TicketZoomSetting.prototype.show = function() {
      return new Modal();
    };

    return TicketZoomSetting;

  })(App.Controller);

  Modal = (function(superClass) {
    extend(Modal, superClass);

    Modal.prototype.buttonClose = true;

    Modal.prototype.buttonCancel = true;

    Modal.prototype.buttonSubmit = false;

    Modal.prototype.head = 'Settings';

    function Modal() {
      this.post = bind(this.post, this);
      this.render = bind(this.render, this);
      Modal.__super__.constructor.apply(this, arguments);
    }

    Modal.prototype.render = function() {
      return Modal.__super__.render.apply(this, arguments);
    };

    Modal.prototype.post = function() {
      return new App.SettingsArea({
        area: 'UI::TicketZoom',
        el: this.el.find('.modal-body')
      });
    };

    Modal.prototype.content = function() {
      return App.view('generic/page_loading')();
    };

    return Modal;

  })(App.ControllerModal);

}).call(this);
:ET